import matplotlib.pyplot as plt
import numpy as np
import os

def initialize_plot():
    plt.figure(figsize=(10, 5))
    plt.xlabel('Time steps')
    plt.ylabel('Average Return')

def random():

    initialize_plot()
    plt.title('Hopper-random-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_hopper-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_hopper-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_hopper-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_hopper-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/hopper-random.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Walker2d-random-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_walker2d-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_walker2d-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_walker2d-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_walker2d-random-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/walker2d-random.png")
    plt.show()
    plt.close()

def medium():

    initialize_plot()
    plt.title('Hopper-medium-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_hopper-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_hopper-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_hopper-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_hopper-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/hopper-medium.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Walker2d-medium-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_walker2d-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_walker2d-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_walker2d-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_walker2d-medium-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/walker2d-medium.png")
    plt.show()
    plt.close()

def expert():

    initialize_plot()
    plt.title('Hopper-expert-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_hopper-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_hopper-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_hopper-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_hopper-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/hopper-expert.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Walker2d-expert-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_walker2d-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_walker2d-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_walker2d-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_walker2d-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/walker2d-expert.png")
    plt.show()
    plt.close()

def medium_replay():

    initialize_plot()
    plt.title('Hopper-medium-replay-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_hopper-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_hopper-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_hopper-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_hopper-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/hopper-medium-replay.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Walker2d-medium-replay-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_walker2d-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_walker2d-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_walker2d-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_walker2d-medium-replay-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/walker2d-medium-replay.png")
    plt.show()
    plt.close()


def medium_expert():

    initialize_plot()
    plt.title('Hopper-medium-expert-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_hopper-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_hopper-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_hopper-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_hopper-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/hopper-medium-expert.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Walker2d-medium-expert-v0')
    rewards = np.array([np.load("./results/baseline/BCQ_baseline_walker2d-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results/GAN/BCQ_GAN_walker2d-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results/quadruple/BCQ_quadruple_walker2d-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results/shared/BCQ_shared_walker2d-medium-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.legend()
    plt.savefig("./Plots/compare/walker2d-medium-expert.png")
    plt.show()
    plt.close()

if __name__ == "__main__":

    os.makedirs("./Plots", exist_ok=True)

    random()
    medium()
    expert()
    medium_replay()
    medium_expert()
